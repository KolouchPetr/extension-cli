{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Extension CLI is a command-line build tool for developing chromium browser extensions fast and in a standardized way. It provides a systematic way to organize, build, test and document extension projects. Features \ud83d\udda5\ufe0f Javascript Bundling Compiles, bundles and minifies javascript files (supports ES6 syntax ) \ud83c\udfa8 CSS Bundling Compiles, bundles, and minifies CSS and SASS files \ud83d\udc84 Linting lint JavaScript using ESLint \ud83d\udce6 ZIP Generation Generates a .zip file for uploading to extension marketplaces \ud83d\udcdd Document Source Code Generates source code documentation using JSDoc \u2697\ufe0f Unit Testing Sets up a unit testing environment with mocha , chai , sinon-chrome and js-dom \u2694\ufe0f Cross-Browser Compatibility develop extensions for Chrome, Edge, Firefox or Opera. Getting Started Note: Using this CLI assumes you have Node.js installed. If you do not, you can install it here . Create a new extension project: 1 npx extension-cli Add CLI to an existing project: 1 npm install extension-cli More detailed getting started guide here \u2192 Command Reference Command Description xt-build Run builds; env flags: -e prod and -e dev xt-test Run unit tests xt-docs Generate docs xt-clean Remove generated files xt-sync Update project config files to match the latest defaults supplied by this CLI More detailed command instructions and configuration options here \u2192 Extension CLI is made by open source contributors behind several popular extensions! Star Fork Issue Watch","title":"Intro"},{"location":"#extension-cli","text":"is a command-line build tool for developing chromium browser extensions fast and in a standardized way. It provides a systematic way to organize, build, test and document extension projects.","title":"Extension CLI"},{"location":"#features","text":"\ud83d\udda5\ufe0f Javascript Bundling Compiles, bundles and minifies javascript files (supports ES6 syntax ) \ud83c\udfa8 CSS Bundling Compiles, bundles, and minifies CSS and SASS files \ud83d\udc84 Linting lint JavaScript using ESLint \ud83d\udce6 ZIP Generation Generates a .zip file for uploading to extension marketplaces \ud83d\udcdd Document Source Code Generates source code documentation using JSDoc \u2697\ufe0f Unit Testing Sets up a unit testing environment with mocha , chai , sinon-chrome and js-dom \u2694\ufe0f Cross-Browser Compatibility develop extensions for Chrome, Edge, Firefox or Opera.","title":"Features"},{"location":"#getting-started","text":"Note: Using this CLI assumes you have Node.js installed. If you do not, you can install it here . Create a new extension project: 1 npx extension-cli Add CLI to an existing project: 1 npm install extension-cli More detailed getting started guide here \u2192","title":"Getting Started"},{"location":"#command-reference","text":"Command Description xt-build Run builds; env flags: -e prod and -e dev xt-test Run unit tests xt-docs Generate docs xt-clean Remove generated files xt-sync Update project config files to match the latest defaults supplied by this CLI More detailed command instructions and configuration options here \u2192 Extension CLI is made by open source contributors behind several popular extensions! Star Fork Issue Watch","title":"Command Reference"},{"location":"01-getting-started/","text":"Installation Prerequisites Before using extension CLI, you must have the following: Node.js JavaScript IDE Terminal access Browser for debugging extensions Setup Create a new extension project: 1 npx extension-cli Add CLI to an existing project: 1 npm install extension-cli Default Project Organization Before you start using the CLI, inspect your project file structure. You can override most of these paths in configurations, but this organization matches the CLI defaults. If you created a new extension using the command above, your file structure already looks like this. Path Description \u2514 assets static assets \u2514\u2500 img Extension icons \u2514\u2500 locales Localized string resources \u2514\u2500 en/messages.json English dictionary \u2514 src Source code: put js, scss, html, json files here \u2514\u2500 manifest.json Extension manifest \u2514 test Unit tests \u2514 package.json Application root","title":"Installation"},{"location":"01-getting-started/#installation","text":"","title":"Installation"},{"location":"01-getting-started/#prerequisites","text":"Before using extension CLI, you must have the following: Node.js JavaScript IDE Terminal access Browser for debugging extensions","title":"Prerequisites"},{"location":"01-getting-started/#setup","text":"Create a new extension project: 1 npx extension-cli Add CLI to an existing project: 1 npm install extension-cli","title":"Setup"},{"location":"01-getting-started/#default-project-organization","text":"Before you start using the CLI, inspect your project file structure. You can override most of these paths in configurations, but this organization matches the CLI defaults. If you created a new extension using the command above, your file structure already looks like this. Path Description \u2514 assets static assets \u2514\u2500 img Extension icons \u2514\u2500 locales Localized string resources \u2514\u2500 en/messages.json English dictionary \u2514 src Source code: put js, scss, html, json files here \u2514\u2500 manifest.json Extension manifest \u2514 test Unit tests \u2514 package.json Application root","title":"Default Project Organization"},{"location":"02-configuration/","text":"Configuration for Existing Applications If you created the extension with Extension CLI, this setup is already done for you, and you may skip this step. For an existing application, before using Extension CLI, add these configuration options to package.json : Babel Presets This is needed to compile projects written in ES6. 1 2 3 4 5 \"babel\" : { \"presets\" : [ \"@babel/preset-env\" ] } ESLint Ignore Exclude test files from being linted. If your project includes compiled 3rd party libraries, you should exclude them also. 1 2 3 \"eslintIgnore\" : [ \"test/**/*\" ] Add Scripts Add these scripts to package.json then you can run, for example, npm run start . 1 2 3 4 5 6 7 \"scripts\" : { \"start\" : \"xt-build -e dev -w\" , \"build\" : \"xt-build -e prod\" , \"clean\" : \"xt-clean\" , \"docs\" : \"xt-docs\" , \"test\" : \"xt-test\" }","title":"Configuration"},{"location":"02-configuration/#configuration-for-existing-applications","text":"If you created the extension with Extension CLI, this setup is already done for you, and you may skip this step. For an existing application, before using Extension CLI, add these configuration options to package.json :","title":"Configuration for Existing Applications"},{"location":"02-configuration/#babel-presets","text":"This is needed to compile projects written in ES6. 1 2 3 4 5 \"babel\" : { \"presets\" : [ \"@babel/preset-env\" ] }","title":"Babel Presets"},{"location":"02-configuration/#eslint-ignore","text":"Exclude test files from being linted. If your project includes compiled 3rd party libraries, you should exclude them also. 1 2 3 \"eslintIgnore\" : [ \"test/**/*\" ]","title":"ESLint Ignore"},{"location":"02-configuration/#add-scripts","text":"Add these scripts to package.json then you can run, for example, npm run start . 1 2 3 4 5 6 7 \"scripts\" : { \"start\" : \"xt-build -e dev -w\" , \"build\" : \"xt-build -e prod\" , \"clean\" : \"xt-clean\" , \"docs\" : \"xt-docs\" , \"test\" : \"xt-test\" }","title":"Add Scripts"},{"location":"03-xt-build-assets/","text":"Static assets Specify how static assets will be handled during builds. By default, extension CLI will look for static assets matching this configuration: 1 2 3 4 5 \"assets\" : [ \"./assets/**/*\" , \"!./assets/locales\" , \"!./assets/locales/**/*\" ], You may change this configuration if the project's static assets are located elsewhere or if you want to include or exclude additional files/directories. After the build step, all static assets will be located in the /dist/assets directory. For example, to refer to images in extension manifest, would be as follows: 1 2 3 4 5 6 7 \"browser_action\" : { \"default_icon\" : { \"16\" : \"assets/img/16x16.png\" , \"24\" : \"assets/img/24x24.png\" , \"32\" : \"assets/img/32x32.png\" } }","title":"Static assets"},{"location":"03-xt-build-assets/#static-assets","text":"Specify how static assets will be handled during builds. By default, extension CLI will look for static assets matching this configuration: 1 2 3 4 5 \"assets\" : [ \"./assets/**/*\" , \"!./assets/locales\" , \"!./assets/locales/**/*\" ], You may change this configuration if the project's static assets are located elsewhere or if you want to include or exclude additional files/directories. After the build step, all static assets will be located in the /dist/assets directory. For example, to refer to images in extension manifest, would be as follows: 1 2 3 4 5 6 7 \"browser_action\" : { \"default_icon\" : { \"16\" : \"assets/img/16x16.png\" , \"24\" : \"assets/img/24x24.png\" , \"32\" : \"assets/img/32x32.png\" } }","title":"Static assets"},{"location":"03-xt-build-cmds/","text":"Custom commands Custom commands enables running any custom actions after build and before generating a release. Custom commands will be executed: after script, styles, HTML and other bundles have been built, and before a release .zip file is generated Custom commands are run for both dev and prod builds. To configure custom commands specify commands build configuration key. For example: 1 2 3 \"xtbuild\" : { \"commands\" : \"python do_something.py\" , } This configuration would first build the extension, then run a custom Python script, then for a production build, generate the extension zip file. Watching changes For dev builds, you can specify a watch pattern, such that changes matching the pattern will re-run custom commands. Specify watch path using commands_watch_path configuration key, for example: 1 2 3 \"xtbuild\" : { \"commands_watch_path\" : \"./src\" } then run build in dev mode with --watch flag. Any changes under ./src directory will cause custom commands to re-run.","title":"Commands"},{"location":"03-xt-build-cmds/#custom-commands","text":"Custom commands enables running any custom actions after build and before generating a release. Custom commands will be executed: after script, styles, HTML and other bundles have been built, and before a release .zip file is generated Custom commands are run for both dev and prod builds. To configure custom commands specify commands build configuration key. For example: 1 2 3 \"xtbuild\" : { \"commands\" : \"python do_something.py\" , } This configuration would first build the extension, then run a custom Python script, then for a production build, generate the extension zip file.","title":"Custom commands"},{"location":"03-xt-build-cmds/#watching-changes","text":"For dev builds, you can specify a watch pattern, such that changes matching the pattern will re-run custom commands. Specify watch path using commands_watch_path configuration key, for example: 1 2 3 \"xtbuild\" : { \"commands_watch_path\" : \"./src\" } then run build in dev mode with --watch flag. Any changes under ./src directory will cause custom commands to re-run.","title":"Watching changes"},{"location":"03-xt-build-copy/","text":"Copying Files Copying enables including files in the output without modifying them during build. This includes use case where you want to skip compilation and linting of scripts or stylesheets. Copying static assets By default, all static assets under assets/ directory will be automatically copied to output directory during builds. copyAsIs allows you to specify an array of files and/or directories which should be included in build output without modification. Files to copy can be located anywhere in your project. The directories to copy are expected to be inside /src directory. The build command will copy: specified files without any modification and add them to the root of the output directory; directory path for files will be flattened. specified directories and their contents without modification and without flattening the path If the copy command fails to locate the specified file or directory, it will not raise an issue, the copy will simply not occur. Example 1: File copy Sample configuration for skipping compilation of pre-compiled files. This configuration will copy material theme directly from node_modules and include it in the dist directory. It will also copy a project level special.js script in the dist directory. No modification will occur to these files during the build step. 1 2 3 4 5 6 \"xtbuild\" : { \"copyAsIs\" : [ \"./node_modules/material-design-lite/material.min.js\" , \"./some/path/special.js\" ] } After the build, dist/ directory root will include material.min.js and special.js . Example 2: Directory copy When copying directories, directory will maintain its structure. Directory to copy must be inside src directory. When specifying a directory use a match pattern, either * or **/* : This build configuration will perform following copy operations: /src/directory/* copies all files under /src/directory/ to dist/ root (excludes nested directories). /src/nested/directory/**/* recursively copies all files and nested directories to dist/ root without flattening path. 1 2 3 4 5 6 \"xtbuild\" : { \"copyAsIs\" : [ \"/src/directory/*\" , \"/src/nested/directory/**/*\" ] } Disable Linting When including precompiled javascript files to an extension project, you should also disable linting for those files to avoid unnecessary warnings. In the project-level package.json , add the file paths to the list of ignored files to prevent them from being linted: 1 2 3 4 5 6 { \"eslintIgnore\" : [ \"test/**/*\" , \"./some/path/special.js\" ] }","title":"Copying files"},{"location":"03-xt-build-copy/#copying-files","text":"Copying enables including files in the output without modifying them during build. This includes use case where you want to skip compilation and linting of scripts or stylesheets. Copying static assets By default, all static assets under assets/ directory will be automatically copied to output directory during builds. copyAsIs allows you to specify an array of files and/or directories which should be included in build output without modification. Files to copy can be located anywhere in your project. The directories to copy are expected to be inside /src directory. The build command will copy: specified files without any modification and add them to the root of the output directory; directory path for files will be flattened. specified directories and their contents without modification and without flattening the path If the copy command fails to locate the specified file or directory, it will not raise an issue, the copy will simply not occur.","title":"Copying Files"},{"location":"03-xt-build-copy/#example-1-file-copy","text":"Sample configuration for skipping compilation of pre-compiled files. This configuration will copy material theme directly from node_modules and include it in the dist directory. It will also copy a project level special.js script in the dist directory. No modification will occur to these files during the build step. 1 2 3 4 5 6 \"xtbuild\" : { \"copyAsIs\" : [ \"./node_modules/material-design-lite/material.min.js\" , \"./some/path/special.js\" ] } After the build, dist/ directory root will include material.min.js and special.js .","title":"Example 1: File copy"},{"location":"03-xt-build-copy/#example-2-directory-copy","text":"When copying directories, directory will maintain its structure. Directory to copy must be inside src directory. When specifying a directory use a match pattern, either * or **/* : This build configuration will perform following copy operations: /src/directory/* copies all files under /src/directory/ to dist/ root (excludes nested directories). /src/nested/directory/**/* recursively copies all files and nested directories to dist/ root without flattening path. 1 2 3 4 5 6 \"xtbuild\" : { \"copyAsIs\" : [ \"/src/directory/*\" , \"/src/nested/directory/**/*\" ] }","title":"Example 2: Directory copy"},{"location":"03-xt-build-copy/#disable-linting","text":"When including precompiled javascript files to an extension project, you should also disable linting for those files to avoid unnecessary warnings. In the project-level package.json , add the file paths to the list of ignored files to prevent them from being linted: 1 2 3 4 5 6 { \"eslintIgnore\" : [ \"test/**/*\" , \"./some/path/special.js\" ] }","title":"Disable Linting"},{"location":"03-xt-build-locales/","text":"Localization Localization enables translating extension to different languages. If the extension supports multiple languages, you can customize extension localization by specifying two build keys: locales_dir and locales_list . Locales directory locales_dir key specifies where in project directory to look for locales files. The default locales_dir is ./assets/locales/ . If you prefer a different directory structure, override this default value. Locales list locales_list is an array that lists all supported languages, and such that the values of this array correspond to subdirectories under locales_dir . Only locales directories specified in this array will be included in the build, which allows excluding incomplete translations from build until they are ready to be included. The default value of locales_list is [\"en\"] . Refer to this list of language codes when specifying value for this configuration. You may include multiple .json files within the language-specific directory to improve maintainability of these files. Building the extension will automatically combine all files within a language directory into a single messages.json which is expected from a browser extensions. Recommended reading: learn how to internationalize extensions . Example This configuration shows build configuration with custom path and multiple language outputs. Build configuration 1 2 3 4 \"xtbuild\" : { \"locales_list\" : [ \"en\" , \"fr\" , \"pl\" ], \"locales_dir\" : \"./my/custom/locales/path/\" } Corresponding project level file structure: File Path Description \u2514 /my/custom/locales/path/ locales directory \u2514\u2500 en /messages.json English dictionary \u2514\u2500 fr /myFile.json French dictionary \u2514\u2500 pl/ \u2514\u2500 app.json Polish dictionary, part 1 \u2514\u2500 options.json Polish dictionary, part 2 Build behavior: myFile.json will be renamed to messages.json app.json and options.json will me combined and renamed to messages.json extension will be available in 3 languages; in dist/ directory: _locales/en/messages.json _locales/fr/messages.json _locales/pl/messages.json","title":"Localization"},{"location":"03-xt-build-locales/#localization","text":"Localization enables translating extension to different languages. If the extension supports multiple languages, you can customize extension localization by specifying two build keys: locales_dir and locales_list .","title":"Localization"},{"location":"03-xt-build-locales/#locales-directory","text":"locales_dir key specifies where in project directory to look for locales files. The default locales_dir is ./assets/locales/ . If you prefer a different directory structure, override this default value.","title":"Locales directory"},{"location":"03-xt-build-locales/#locales-list","text":"locales_list is an array that lists all supported languages, and such that the values of this array correspond to subdirectories under locales_dir . Only locales directories specified in this array will be included in the build, which allows excluding incomplete translations from build until they are ready to be included. The default value of locales_list is [\"en\"] . Refer to this list of language codes when specifying value for this configuration. You may include multiple .json files within the language-specific directory to improve maintainability of these files. Building the extension will automatically combine all files within a language directory into a single messages.json which is expected from a browser extensions. Recommended reading: learn how to internationalize extensions .","title":"Locales list"},{"location":"03-xt-build-locales/#example","text":"This configuration shows build configuration with custom path and multiple language outputs. Build configuration 1 2 3 4 \"xtbuild\" : { \"locales_list\" : [ \"en\" , \"fr\" , \"pl\" ], \"locales_dir\" : \"./my/custom/locales/path/\" } Corresponding project level file structure: File Path Description \u2514 /my/custom/locales/path/ locales directory \u2514\u2500 en /messages.json English dictionary \u2514\u2500 fr /myFile.json French dictionary \u2514\u2500 pl/ \u2514\u2500 app.json Polish dictionary, part 1 \u2514\u2500 options.json Polish dictionary, part 2 Build behavior: myFile.json will be renamed to messages.json app.json and options.json will me combined and renamed to messages.json extension will be available in 3 languages; in dist/ directory: _locales/en/messages.json _locales/fr/messages.json _locales/pl/messages.json","title":"Example"},{"location":"03-xt-build-scripts/","text":"Building Scripts Instructions for configuring javascript build outputs. js_bundles key is used to configure build settings for javascript bundles. It allows you to specify: name of each generated js file which input files to included in each bundle how many js files to generate during build The expected value for js_bundles is an array of objects where: name is the output filename without file extension src specifies which files to include in each bundle. You can use a string value for a single file, array of files, a path with wildcard. You may also use ! as a way to negate the inclusion of a file. This is the globs syntax expected by gulp (without options). The number of objects in the array determines the number of output files. By default js_bundles value is null . This means no javascript files will be generated. Example Build configuration that will generate two javascript files in the /dist directory. One file contain exactly src/background.js and One file contains all .js files under scr/app/dir1 and scr/app/dir2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \"xtbuild\" : { \"js_bundles\" : [ { \"name\" : \"background\" , \"src\" : \"./src/background.js\" }, { \"name\" : \"app\" , \"src\" : [ \"./src/app/dir1/**/*.js\" , \"./src/app/dir2/**/*.js\" ] } ] } After running build command, dist/ will contain background.js and app.js .","title":"Building scripts"},{"location":"03-xt-build-scripts/#building-scripts","text":"Instructions for configuring javascript build outputs. js_bundles key is used to configure build settings for javascript bundles. It allows you to specify: name of each generated js file which input files to included in each bundle how many js files to generate during build The expected value for js_bundles is an array of objects where: name is the output filename without file extension src specifies which files to include in each bundle. You can use a string value for a single file, array of files, a path with wildcard. You may also use ! as a way to negate the inclusion of a file. This is the globs syntax expected by gulp (without options). The number of objects in the array determines the number of output files. By default js_bundles value is null . This means no javascript files will be generated.","title":"Building Scripts"},{"location":"03-xt-build-scripts/#example","text":"Build configuration that will generate two javascript files in the /dist directory. One file contain exactly src/background.js and One file contains all .js files under scr/app/dir1 and scr/app/dir2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \"xtbuild\" : { \"js_bundles\" : [ { \"name\" : \"background\" , \"src\" : \"./src/background.js\" }, { \"name\" : \"app\" , \"src\" : [ \"./src/app/dir1/**/*.js\" , \"./src/app/dir2/**/*.js\" ] } ] } After running build command, dist/ will contain background.js and app.js .","title":"Example"},{"location":"03-xt-build-styles/","text":"Building Stylesheets Instructions for configuring stylesheet build outputs. scss_bundles are used to configure build settings for CSS stylesheets. The expected value is an array with zero or more objects where. name is the output bundle filename with file extension src specifies which files to include in each bundle; you can use a string value for a single file array of files, or a path with wildcard. You may also use ! as a way to negate the inclusion of a file. This is the globs syntax expected by gulp (without options). The production build will minify style files. Dev build does not minify style files. By default, the stylesheets are assumed to be written using Sass . If you are not a friend of Sass language stylesheets, you can write your style sheets using regular CSS. Any CSS you write is valid Sass as well. When you name stylesheet files, use .scss file extension. The default CLI configuration looks for this file extension. Otherwise you must override this default configuration: \"scss\": \"./src/**/*.scss\" to include other file extensions in the style bundles. Example Sample project-level configuration with multiple style bundles 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \"xtbuild\" : { \"scss_bundles\" : [ { \"src\" : [ \"./src/**/*.scss\" , \"!./src/app/styles/app.scss\" ], \"name\" : \"styles.css\" }, { \"src\" : [ \"./src/app/styles/ui.scss\" ], \"name\" : \"display.css\" } ] }","title":"Building styles"},{"location":"03-xt-build-styles/#building-stylesheets","text":"Instructions for configuring stylesheet build outputs. scss_bundles are used to configure build settings for CSS stylesheets. The expected value is an array with zero or more objects where. name is the output bundle filename with file extension src specifies which files to include in each bundle; you can use a string value for a single file array of files, or a path with wildcard. You may also use ! as a way to negate the inclusion of a file. This is the globs syntax expected by gulp (without options). The production build will minify style files. Dev build does not minify style files. By default, the stylesheets are assumed to be written using Sass . If you are not a friend of Sass language stylesheets, you can write your style sheets using regular CSS. Any CSS you write is valid Sass as well. When you name stylesheet files, use .scss file extension. The default CLI configuration looks for this file extension. Otherwise you must override this default configuration: \"scss\": \"./src/**/*.scss\" to include other file extensions in the style bundles. Example Sample project-level configuration with multiple style bundles 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \"xtbuild\" : { \"scss_bundles\" : [ { \"src\" : [ \"./src/**/*.scss\" , \"!./src/app/styles/app.scss\" ], \"name\" : \"styles.css\" }, { \"src\" : [ \"./src/app/styles/ui.scss\" ], \"name\" : \"display.css\" } ] }","title":"Building Stylesheets"},{"location":"03-xt-build/","text":"xt-build xt-build command is used for generating a debuggable, development version of an extension project. It is also used to create a production-ready, minified .zip file that can be uploaded to an extension/add-on marketplace for distribution. Successful build command always generates an extension in build output directory that can be debugged in the browser. The underlying build system uses gulp , babel and webpack to compile scripts (among other plugins). Dev Build Artifacts When specifying dev build flag, the build will complete using development settings. The output of a successful dev build is an extension source code, in the specified build output directory ( dist/ by default), which can be debugged using a chromium browser. Prod Build Artifacts When specifying prod build flag, the build will run a production build. Successful production build will generate a extension source code in build output directory ( dist/ by default), which can be debugged in the browser. It will also generate a release.zip file in the project root strictly based on the files in the dist directory. This zip file can be uploaded to extension/add-on marketplace such as Chrome Web Store or Firefox add-ons. When running a production build, all code files (js, css, HTML, json) will be minified. Commands Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Run build with default options Default is production build for chrome 1 xt-build Run production build using explicit environment flag -e or --env 1 xt-build { -e | --env } dev 1 xt-build { -e | --env } prod Run build for specific target browser 1 xt-build { -p | --platform } chrome 1 xt-build { -p | --platform } firefox Run build using custom configuration file path 1 xt-build { -c | --config } /path/to/config.json Run development build and keep watching changes 1 xt-build { -e | --env } dev { -w | --watch } Get help using this command 1 xt-build --help Package.json scripts After adding Extension CLI to your project, you can run these commands from a terminal using syntax npx xt-build . Or you can add an option to packages.json scripts section as shown below, and then execute the command as npm run build or npm run start . 1 2 3 4 \"scripts\" :{ \"start\" : \"xt-build -e dev -w\" , \"build\" : \"xt-build -e prod\" , } Default Configuration By default the CLI will look for build configuration in two different places: in package.json using key xtbuild in a file named .xtbuild.json in project root If these two locations cause a conflict, alternatively you can provide a path to configuration file with -c or --config flag, followed by path to file. See commands for an example of how to configure this behavior . The CLI uses a default build configuration file shown below. This tells extension CLI where to look for input files, how to process them, and where to output files. You can override any of these key-value pairs at project level. Explanations for each of these keys is given below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"projectRootDir\" : \"../../../\" , \"dist\" : \"./dist\" , \"source\" : \"./src\" , \"releases\" : \"./\" , \"release_name\" : \"release\" , \"manifest\" : \"./src/manifest.json\" , \"js\" : \"./src/**/*.js\" , \"js_bundles\" : null , \"html\" : \"./src/**/*.html\" , \"scss\" : \"./src/**/*.scss\" , \"scss_bundles\" : null , \"assets\" : [ \"./assets/**/*\" , \"!./assets/locales\" , \"!./assets/locales/**/*\" ], \"copyAsIs\" : [], \"locales_dir\" : \"./assets/locales/\" , \"locales_list\" : [ \"en\" ], \"commands\" : \"\" , \"commands_watch_path\" : null } Configuration Keys Key Description Guide \"projectRootDir\" Path to project from the to CLI location \"dist\" Build output directory \"source\" Source code directory \"releases\" Directory for outputting releases \"release_name\" name of release zip file \"manifest\" Extension manifest file with path \"js\" Javascript watch pattern during dev builds \"js_bundles\" Javascript bundles configuration Guide \"html\" location and watch pattern of HTML files \"scss\" Stylesheets watch pattern during dev builds \"scss_bundles\" Stylesheets bundles configuration Guide \"assets\" Static assets configuration match pattern Guide \"copyAsIs\" File and directories to copy without modification Guide \"locales_dir\" Localizations directory Guide \"locales_list\" List of locales Guide \"commands\" Custom commands Guide \"commands_watch_path\" Commands watch pattern during dev builds Guide","title":"Overview"},{"location":"03-xt-build/#xt-build","text":"xt-build command is used for generating a debuggable, development version of an extension project. It is also used to create a production-ready, minified .zip file that can be uploaded to an extension/add-on marketplace for distribution. Successful build command always generates an extension in build output directory that can be debugged in the browser. The underlying build system uses gulp , babel and webpack to compile scripts (among other plugins).","title":"xt-build"},{"location":"03-xt-build/#dev-build-artifacts","text":"When specifying dev build flag, the build will complete using development settings. The output of a successful dev build is an extension source code, in the specified build output directory ( dist/ by default), which can be debugged using a chromium browser.","title":"Dev Build Artifacts"},{"location":"03-xt-build/#prod-build-artifacts","text":"When specifying prod build flag, the build will run a production build. Successful production build will generate a extension source code in build output directory ( dist/ by default), which can be debugged in the browser. It will also generate a release.zip file in the project root strictly based on the files in the dist directory. This zip file can be uploaded to extension/add-on marketplace such as Chrome Web Store or Firefox add-ons. When running a production build, all code files (js, css, HTML, json) will be minified.","title":"Prod Build Artifacts"},{"location":"03-xt-build/#commands","text":"Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Run build with default options Default is production build for chrome 1 xt-build Run production build using explicit environment flag -e or --env 1 xt-build { -e | --env } dev 1 xt-build { -e | --env } prod Run build for specific target browser 1 xt-build { -p | --platform } chrome 1 xt-build { -p | --platform } firefox Run build using custom configuration file path 1 xt-build { -c | --config } /path/to/config.json Run development build and keep watching changes 1 xt-build { -e | --env } dev { -w | --watch } Get help using this command 1 xt-build --help","title":"Commands"},{"location":"03-xt-build/#packagejson-scripts","text":"After adding Extension CLI to your project, you can run these commands from a terminal using syntax npx xt-build . Or you can add an option to packages.json scripts section as shown below, and then execute the command as npm run build or npm run start . 1 2 3 4 \"scripts\" :{ \"start\" : \"xt-build -e dev -w\" , \"build\" : \"xt-build -e prod\" , }","title":"Package.json scripts"},{"location":"03-xt-build/#default-configuration","text":"By default the CLI will look for build configuration in two different places: in package.json using key xtbuild in a file named .xtbuild.json in project root If these two locations cause a conflict, alternatively you can provide a path to configuration file with -c or --config flag, followed by path to file. See commands for an example of how to configure this behavior . The CLI uses a default build configuration file shown below. This tells extension CLI where to look for input files, how to process them, and where to output files. You can override any of these key-value pairs at project level. Explanations for each of these keys is given below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \"projectRootDir\" : \"../../../\" , \"dist\" : \"./dist\" , \"source\" : \"./src\" , \"releases\" : \"./\" , \"release_name\" : \"release\" , \"manifest\" : \"./src/manifest.json\" , \"js\" : \"./src/**/*.js\" , \"js_bundles\" : null , \"html\" : \"./src/**/*.html\" , \"scss\" : \"./src/**/*.scss\" , \"scss_bundles\" : null , \"assets\" : [ \"./assets/**/*\" , \"!./assets/locales\" , \"!./assets/locales/**/*\" ], \"copyAsIs\" : [], \"locales_dir\" : \"./assets/locales/\" , \"locales_list\" : [ \"en\" ], \"commands\" : \"\" , \"commands_watch_path\" : null }","title":"Default Configuration"},{"location":"03-xt-build/#configuration-keys","text":"Key Description Guide \"projectRootDir\" Path to project from the to CLI location \"dist\" Build output directory \"source\" Source code directory \"releases\" Directory for outputting releases \"release_name\" name of release zip file \"manifest\" Extension manifest file with path \"js\" Javascript watch pattern during dev builds \"js_bundles\" Javascript bundles configuration Guide \"html\" location and watch pattern of HTML files \"scss\" Stylesheets watch pattern during dev builds \"scss_bundles\" Stylesheets bundles configuration Guide \"assets\" Static assets configuration match pattern Guide \"copyAsIs\" File and directories to copy without modification Guide \"locales_dir\" Localizations directory Guide \"locales_list\" List of locales Guide \"commands\" Custom commands Guide \"commands_watch_path\" Commands watch pattern during dev builds Guide","title":"Configuration Keys"},{"location":"04-xt-clean/","text":"xt-clean xt-clean command removes all automatically generated files from the project directories. Clean operation iterates over files and directories listed in the project .gitignore file, and removes all ignored files and directories, except node_modules/ , .idea/ , and .vscode/ . .idea is a collection of configuration files used by WebStorm IDE, and .vscode is the same for Visual Studio Code. The IDE will generate them automatically if they are absent. To remove these three directories, you must explicitly pass a flag to delete each directory respectively. Commands Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Remove ignored files (default) 1 xt-clean Clear ignored files, including node_modules 1 xt-clean { -m | --modules } Clear ignored files, including .idea/ directory 1 xt-clean { -i | --idea } Clear ignored files, including .vscode/ directory 1 xt-clean { -v | --vscode } Clear absolutely all ignored files 1 xt-clean -v -i -m Get help using this command 1 xt-clean --help Package.json scripts After installing extension-cli, you can run these commands from a terminal using syntax npx xt-clean . Or you can add an option to packages.json scripts section and then execute the command as npm run clean See example below. 1 2 3 \"scripts\" :{ \"clean\" : \"xt-clean\" }","title":"xt-clean"},{"location":"04-xt-clean/#xt-clean","text":"xt-clean command removes all automatically generated files from the project directories. Clean operation iterates over files and directories listed in the project .gitignore file, and removes all ignored files and directories, except node_modules/ , .idea/ , and .vscode/ . .idea is a collection of configuration files used by WebStorm IDE, and .vscode is the same for Visual Studio Code. The IDE will generate them automatically if they are absent. To remove these three directories, you must explicitly pass a flag to delete each directory respectively.","title":"xt-clean"},{"location":"04-xt-clean/#commands","text":"Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Remove ignored files (default) 1 xt-clean Clear ignored files, including node_modules 1 xt-clean { -m | --modules } Clear ignored files, including .idea/ directory 1 xt-clean { -i | --idea } Clear ignored files, including .vscode/ directory 1 xt-clean { -v | --vscode } Clear absolutely all ignored files 1 xt-clean -v -i -m Get help using this command 1 xt-clean --help","title":"Commands"},{"location":"04-xt-clean/#packagejson-scripts","text":"After installing extension-cli, you can run these commands from a terminal using syntax npx xt-clean . Or you can add an option to packages.json scripts section and then execute the command as npm run clean See example below. 1 2 3 \"scripts\" :{ \"clean\" : \"xt-clean\" }","title":"Package.json scripts"},{"location":"05-xt-docs/","text":"xt-docs xt-docs command is used for generating source code documentation for an extension project. Extension CLI uses JSDoc specification to generate documentation for javascript files in an extension project. JSDoc is a flexible documentation generator that converts javascript code comments to readable HTML/CSS files which you can be hosted for example with github pages. You can use any compatible template of choice to skin your docs. Learn more about templating here . Commands Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Default command 1 xt-docs Command using custom configuration file path 1 xt-docs { -c | --config } \"/path/to/config.json\" Build docs and keep watching changes 1 xt-docs { -w | --watch } Get help using this command 1 xt-docs --help Package.json scripts After installing extension-cli, you can run these commands from a terminal using syntax npx xt-docs . Or you can add an option to packages.json scripts section and then execute the command as npm run docs . See example below. 1 2 3 \"scripts\" :{ \"docs\" : \"xt-docs\" } Configuration By default the CLI will look for docs configuration in two different places: in package.json using key xtdocs in a file named .xtdocs.json in project root If these two locations cause a conflict, alternatively you can provide a path to configuration file with -c ( --config ) flag, followed by path to file. See commands for an example . Minimum Project-Level Configuration Within the extension project you should define, at minimum, the following configuration options: 1 2 3 4 5 6 7 \"xtdocs\" : { \"templates\" : { \"systemName\" : \"{extension name}\" , \"systemSummary\" : \"{short description}\" , \"systemColor\" : \"{css-color}\" } } where: key Description of value systemName Project name systemSummary Short description of your project; becomes a subheading in generated docs systemColor Theme color, e.g. hex or rgb value #000000 . Default Configuration The CLI uses a documentation configuration file shown below. You can override any of these key-value pairs at project level. You can also add key-value pairs that are not defined here so long as they follow to JSDoc guidelines . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \"xtdocs\" : { \"tags\" : { \"allowUnknownTags\" : true , \"dictionaries\" : [ \"jsdoc\" ] }, \"source\" : { \"include\" : [ \"src\" ], \"includePattern\" : \".js$\" , \"excludePattern\" : \"(node_modules/|docs)\" }, \"plugins\" : [ \"plugins/markdown\" ], \"templates\" : { \"footer\" : \"\" , \"copyright\" : \"\" , \"includeDate\" : \"true\" , \"dateFormat\" : \"MMM YYYY\" , \"inlineNav\" : \"true\" , \"inverseNav\" : \"false\" , \"linenums\" : \"true\" , \"showTableOfContents\" : \"true\" , \"showAccessFilter\" : \"true\" , \"collapseSymbols\" : \"true\" , \"methodHeadingReturns\" : \"false\" , \"outputSourceFiles\" : \"true\" , \"outputSourcePath\" : \"true\" , \"search\" : \"true\" , \"stylesheets\" : [ \"data:text/css;base64,Zm9vdGVyewogICAgZGlzcGxheTpub25lIWltcG9ydGFudDsKfQ==\" ], \"scripts\" : [], \"favicon\" : \"./assets/img/128x128.png\" }, \"opts\" : { \"destination\" : \"./public/documentation\" , \"encoding\" : \"utf8\" , \"private\" : true , \"recurse\" : true , \"template\" : \"./node_modules/foodoc/template\" } } Templates templates key is used specifically to customize the options for a template of choice. This is useful if you want to change the look and feel of the generated documentation. The default template used by this CLI is Foodoc . You can change the template by overriding opts.template in the project-level configuration, and by adding the template package of your choice to project-level dependencies. This list can help you get started with picking a custom template. If you cannot find one that you like, you can always make and publish your own.","title":"xt-docs"},{"location":"05-xt-docs/#xt-docs","text":"xt-docs command is used for generating source code documentation for an extension project. Extension CLI uses JSDoc specification to generate documentation for javascript files in an extension project. JSDoc is a flexible documentation generator that converts javascript code comments to readable HTML/CSS files which you can be hosted for example with github pages. You can use any compatible template of choice to skin your docs. Learn more about templating here .","title":"xt-docs"},{"location":"05-xt-docs/#commands","text":"Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Default command 1 xt-docs Command using custom configuration file path 1 xt-docs { -c | --config } \"/path/to/config.json\" Build docs and keep watching changes 1 xt-docs { -w | --watch } Get help using this command 1 xt-docs --help","title":"Commands"},{"location":"05-xt-docs/#packagejson-scripts","text":"After installing extension-cli, you can run these commands from a terminal using syntax npx xt-docs . Or you can add an option to packages.json scripts section and then execute the command as npm run docs . See example below. 1 2 3 \"scripts\" :{ \"docs\" : \"xt-docs\" }","title":"Package.json scripts"},{"location":"05-xt-docs/#configuration","text":"By default the CLI will look for docs configuration in two different places: in package.json using key xtdocs in a file named .xtdocs.json in project root If these two locations cause a conflict, alternatively you can provide a path to configuration file with -c ( --config ) flag, followed by path to file. See commands for an example .","title":"Configuration"},{"location":"05-xt-docs/#minimum-project-level-configuration","text":"Within the extension project you should define, at minimum, the following configuration options: 1 2 3 4 5 6 7 \"xtdocs\" : { \"templates\" : { \"systemName\" : \"{extension name}\" , \"systemSummary\" : \"{short description}\" , \"systemColor\" : \"{css-color}\" } } where: key Description of value systemName Project name systemSummary Short description of your project; becomes a subheading in generated docs systemColor Theme color, e.g. hex or rgb value #000000 .","title":"Minimum Project-Level Configuration"},{"location":"05-xt-docs/#default-configuration","text":"The CLI uses a documentation configuration file shown below. You can override any of these key-value pairs at project level. You can also add key-value pairs that are not defined here so long as they follow to JSDoc guidelines . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \"xtdocs\" : { \"tags\" : { \"allowUnknownTags\" : true , \"dictionaries\" : [ \"jsdoc\" ] }, \"source\" : { \"include\" : [ \"src\" ], \"includePattern\" : \".js$\" , \"excludePattern\" : \"(node_modules/|docs)\" }, \"plugins\" : [ \"plugins/markdown\" ], \"templates\" : { \"footer\" : \"\" , \"copyright\" : \"\" , \"includeDate\" : \"true\" , \"dateFormat\" : \"MMM YYYY\" , \"inlineNav\" : \"true\" , \"inverseNav\" : \"false\" , \"linenums\" : \"true\" , \"showTableOfContents\" : \"true\" , \"showAccessFilter\" : \"true\" , \"collapseSymbols\" : \"true\" , \"methodHeadingReturns\" : \"false\" , \"outputSourceFiles\" : \"true\" , \"outputSourcePath\" : \"true\" , \"search\" : \"true\" , \"stylesheets\" : [ \"data:text/css;base64,Zm9vdGVyewogICAgZGlzcGxheTpub25lIWltcG9ydGFudDsKfQ==\" ], \"scripts\" : [], \"favicon\" : \"./assets/img/128x128.png\" }, \"opts\" : { \"destination\" : \"./public/documentation\" , \"encoding\" : \"utf8\" , \"private\" : true , \"recurse\" : true , \"template\" : \"./node_modules/foodoc/template\" } }","title":"Default Configuration"},{"location":"05-xt-docs/#templates","text":"templates key is used specifically to customize the options for a template of choice. This is useful if you want to change the look and feel of the generated documentation. The default template used by this CLI is Foodoc . You can change the template by overriding opts.template in the project-level configuration, and by adding the template package of your choice to project-level dependencies. This list can help you get started with picking a custom template. If you cannot find one that you like, you can always make and publish your own.","title":"Templates"},{"location":"06-xt-sync/","text":"xt-sync xt-sync command is intended for upgrading configuration files of a stale project to the latest versions When a project has not been worked on recently, it may need updates of various files, such as CI configuration files. The purpose of this command is to make that update process simple by allowing each project to choose which configuration files to update. The CLI will then supply the project with the most recent configuration files. Note: If the configuration files have been modified heavily for an individual project, it is not advisable to upgrade them in this manner. Instead you should upgrade such configuration files manually. Commands Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. You must pass at least one flag with this command. Synchronize all configuration files 1 xt-sync { -a | --all } Synchronize ESLint configuration file 1 xt-sync { -e | --eslint } Synchronize Gitlab CI configuration file 1 xt-sync { -l | --gitlab } Synchronize Travis CI configuration file 1 xt-sync { -t | --travis } Synchronize .gitignore file 1 xt-sync { -g | --gitignore } Get help using this command 1 xt-sync --help Package.json scripts After installing extension-cli, you can run these commands from a terminal using npx xt-sync --all . Or you can add an option to packages.json scripts section and then execute the command as npm run sync . See example below. 1 2 3 \"scripts\" :{ \"sync\" : \"xt-sync --all\" }","title":"xt-sync"},{"location":"06-xt-sync/#xt-sync","text":"xt-sync command is intended for upgrading configuration files of a stale project to the latest versions When a project has not been worked on recently, it may need updates of various files, such as CI configuration files. The purpose of this command is to make that update process simple by allowing each project to choose which configuration files to update. The CLI will then supply the project with the most recent configuration files. Note: If the configuration files have been modified heavily for an individual project, it is not advisable to upgrade them in this manner. Instead you should upgrade such configuration files manually.","title":"xt-sync"},{"location":"06-xt-sync/#commands","text":"Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. You must pass at least one flag with this command. Synchronize all configuration files 1 xt-sync { -a | --all } Synchronize ESLint configuration file 1 xt-sync { -e | --eslint } Synchronize Gitlab CI configuration file 1 xt-sync { -l | --gitlab } Synchronize Travis CI configuration file 1 xt-sync { -t | --travis } Synchronize .gitignore file 1 xt-sync { -g | --gitignore } Get help using this command 1 xt-sync --help","title":"Commands"},{"location":"06-xt-sync/#packagejson-scripts","text":"After installing extension-cli, you can run these commands from a terminal using npx xt-sync --all . Or you can add an option to packages.json scripts section and then execute the command as npm run sync . See example below. 1 2 3 \"scripts\" :{ \"sync\" : \"xt-sync --all\" }","title":"Package.json scripts"},{"location":"07-xt-test/","text":"xt-test xt-test command will run unit tests This command will setup extension testing environment that is pre-initialized with mocha , chai (including chai-as-promised), and expect. nyc is used for computing code coverage. Also the following browser features are initialized: window, chrome. Window is setup using jsdom-global and chrome using sinon-chrome . By default this command will look for tests in test/ directory, in any file ending with .js , but you can change this default value. Mocha will execute with babel, meaning you can use this test environment with ES6 modules. You may extend this test environment within an extension project; this is simply the base setup for running unit tests. Or you may create your own test environment if this is not suitable. Commands Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Run unit tests (default) 1 xt-test Configure custom test directory path or match pattern Defaults to ./test/**/*.js if not specified 1 xt-test { -p | --pattern } Execute tests and keep watching changes 1 xt-test { -w | --watch } Execute tests then pipe result to coveralls.io The default command will display coverage. Use this command explicitly to publish your coverage stats and track progress over time, for example during automated build. 1 xt-test { -c | --coverage } Get help using this command 1 xt-test --help Package.json scripts After installing extension-cli, you can run these commands from a terminal using syntax npx xt-test . Or you can add an option to packages.json scripts section and then execute the command as npm run test . See example below. 1 2 3 \"scripts\" :{ \"test\" : \"xt-test\" }","title":"xt-test"},{"location":"07-xt-test/#xt-test","text":"xt-test command will run unit tests This command will setup extension testing environment that is pre-initialized with mocha , chai (including chai-as-promised), and expect. nyc is used for computing code coverage. Also the following browser features are initialized: window, chrome. Window is setup using jsdom-global and chrome using sinon-chrome . By default this command will look for tests in test/ directory, in any file ending with .js , but you can change this default value. Mocha will execute with babel, meaning you can use this test environment with ES6 modules. You may extend this test environment within an extension project; this is simply the base setup for running unit tests. Or you may create your own test environment if this is not suitable.","title":"xt-test"},{"location":"07-xt-test/#commands","text":"Braces { } indicate that the user must choose one \u2014 and only one \u2014 of the items inside the braces. Run unit tests (default) 1 xt-test Configure custom test directory path or match pattern Defaults to ./test/**/*.js if not specified 1 xt-test { -p | --pattern } Execute tests and keep watching changes 1 xt-test { -w | --watch } Execute tests then pipe result to coveralls.io The default command will display coverage. Use this command explicitly to publish your coverage stats and track progress over time, for example during automated build. 1 xt-test { -c | --coverage } Get help using this command 1 xt-test --help","title":"Commands"},{"location":"07-xt-test/#packagejson-scripts","text":"After installing extension-cli, you can run these commands from a terminal using syntax npx xt-test . Or you can add an option to packages.json scripts section and then execute the command as npm run test . See example below. 1 2 3 \"scripts\" :{ \"test\" : \"xt-test\" }","title":"Package.json scripts"},{"location":"08-xt-create/","text":"extension-cli extension-cli command is used to create a new extension project. Commands 1 npx extension-cli This command will prompt you with necessary questions. You do not need to call it with any arguments. This command will generate initial files and directories for a new project. Run it in the directory where you want to create the extension.","title":"extension-cli"},{"location":"08-xt-create/#extension-cli","text":"extension-cli command is used to create a new extension project.","title":"extension-cli"},{"location":"08-xt-create/#commands","text":"1 npx extension-cli This command will prompt you with necessary questions. You do not need to call it with any arguments. This command will generate initial files and directories for a new project. Run it in the directory where you want to create the extension.","title":"Commands"},{"location":"09-release-notes-0/","text":"0.11.9 (2021-04-04) xt-build : enable customizing release filename PR #37 update dependencies PR #39 improve user guide organization and UI PR #38 , PR #40 0.11.8 (2021-03-12) xt-build : support copying directories as-is #32 xt-build : append '.css' at the end of name if not specified by the user PR #36 0.11.7 (2021-03-02) xt-docs : make watch recursive on watched directories xt-docs : add tutorials directory to watch list (if exists) xt-docs : display error when docs command fails 0.11.6 (2021-02-25) xt-docs: add watch mode to docs command, see: #23 0.11.5 (2021-02-24) xt-test: unit code result reporting fix, see: #26 0.11.3 (2021-01-27) xt-build: file watch fix 0.11.2 (2021-01-08) xt-build: command path fix 0.11.1 (2021-01-06) xt-build: allow specifying custom build commands xt-create: fix image generation issue update packages 0.10.1 (2020-12-15) update test configs check if gitignore exists before xt-clean xt-create: change default icon to high contrast update packages 0.9.4 (2020-11-29) extension-cli: fix typo update packages 0.9.3 (2020-10-31) xt-clean: improve xt-clean command handling of files change icon update docs 0.9.1 (2020-10-11) fix: xt-docs config keys replace when value is an array 0.9.0 (2020-10-05) xt-test: add configurable test path xt-create: sanitize package name update packages xt-clean: refactor command xt-docs: refactor docs command xt-sync: refactor sync command 0.8.16 (2020-08-09) update packages 0.8.15 (2020-08-04) update packages 0.8.14 (2020-08-01) update xt-create 0.8.13 (2020-07-26) updated packages 0.8.12 (2020-05-26) update build command 0.8.11 (2020-05-25) fix issue with create command docs configs add new/missing docs dependency 0.8.10 (2020-05-25) xt-build bug fixes Made webpack options configurable, to enable adding loaders etc. Upgraded project dependencies 0.8.9 (2020-04-10) Implemented command to create new extension Updated docs to reflect this new command 0.8.8 (2020-04-08) Upgraded project dependencies 0.8.7 (2020-01-17) Upgraded project dependencies Fixed scripts build step (changed webpack options) 0.8.6 (2019-12-21) Initial release for this publisher Migrated project from older source code Upgraded all packages Migrated build to use Gulp v4","title":"Version 0.x"},{"location":"09-release-notes-0/#0119-2021-04-04","text":"xt-build : enable customizing release filename PR #37 update dependencies PR #39 improve user guide organization and UI PR #38 , PR #40","title":"0.11.9 (2021-04-04)"},{"location":"09-release-notes-0/#0118-2021-03-12","text":"xt-build : support copying directories as-is #32 xt-build : append '.css' at the end of name if not specified by the user PR #36","title":"0.11.8 (2021-03-12)"},{"location":"09-release-notes-0/#0117-2021-03-02","text":"xt-docs : make watch recursive on watched directories xt-docs : add tutorials directory to watch list (if exists) xt-docs : display error when docs command fails","title":"0.11.7 (2021-03-02)"},{"location":"09-release-notes-0/#0116-2021-02-25","text":"xt-docs: add watch mode to docs command, see: #23","title":"0.11.6 (2021-02-25)"},{"location":"09-release-notes-0/#0115-2021-02-24","text":"xt-test: unit code result reporting fix, see: #26","title":"0.11.5 (2021-02-24)"},{"location":"09-release-notes-0/#0113-2021-01-27","text":"xt-build: file watch fix","title":"0.11.3 (2021-01-27)"},{"location":"09-release-notes-0/#0112-2021-01-08","text":"xt-build: command path fix","title":"0.11.2 (2021-01-08)"},{"location":"09-release-notes-0/#0111-2021-01-06","text":"xt-build: allow specifying custom build commands xt-create: fix image generation issue update packages","title":"0.11.1 (2021-01-06)"},{"location":"09-release-notes-0/#0101-2020-12-15","text":"update test configs check if gitignore exists before xt-clean xt-create: change default icon to high contrast update packages","title":"0.10.1 (2020-12-15)"},{"location":"09-release-notes-0/#094-2020-11-29","text":"extension-cli: fix typo update packages","title":"0.9.4 (2020-11-29)"},{"location":"09-release-notes-0/#093-2020-10-31","text":"xt-clean: improve xt-clean command handling of files change icon update docs","title":"0.9.3 (2020-10-31)"},{"location":"09-release-notes-0/#091-2020-10-11","text":"fix: xt-docs config keys replace when value is an array","title":"0.9.1 (2020-10-11)"},{"location":"09-release-notes-0/#090-2020-10-05","text":"xt-test: add configurable test path xt-create: sanitize package name update packages xt-clean: refactor command xt-docs: refactor docs command xt-sync: refactor sync command","title":"0.9.0 (2020-10-05)"},{"location":"09-release-notes-0/#0816-2020-08-09","text":"update packages","title":"0.8.16 (2020-08-09)"},{"location":"09-release-notes-0/#0815-2020-08-04","text":"update packages","title":"0.8.15  (2020-08-04)"},{"location":"09-release-notes-0/#0814-2020-08-01","text":"update xt-create","title":"0.8.14 (2020-08-01)"},{"location":"09-release-notes-0/#0813-2020-07-26","text":"updated packages","title":"0.8.13 (2020-07-26)"},{"location":"09-release-notes-0/#0812-2020-05-26","text":"update build command","title":"0.8.12 (2020-05-26)"},{"location":"09-release-notes-0/#0811-2020-05-25","text":"fix issue with create command docs configs add new/missing docs dependency","title":"0.8.11 (2020-05-25)"},{"location":"09-release-notes-0/#0810-2020-05-25","text":"xt-build bug fixes Made webpack options configurable, to enable adding loaders etc. Upgraded project dependencies","title":"0.8.10 (2020-05-25)"},{"location":"09-release-notes-0/#089-2020-04-10","text":"Implemented command to create new extension Updated docs to reflect this new command","title":"0.8.9 (2020-04-10)"},{"location":"09-release-notes-0/#088-2020-04-08","text":"Upgraded project dependencies","title":"0.8.8 (2020-04-08)"},{"location":"09-release-notes-0/#087-2020-01-17","text":"Upgraded project dependencies Fixed scripts build step (changed webpack options)","title":"0.8.7 (2020-01-17)"},{"location":"09-release-notes-0/#086-2019-12-21","text":"Initial release for this publisher Migrated project from older source code Upgraded all packages Migrated build to use Gulp v4","title":"0.8.6 (2019-12-21)"},{"location":"09-release-notes/","text":"1.0.2 (2021-04-11) Changes to build Custom folders for scss bundles and always minify css PR #47 Default style bundle name without extension PR #48 1.0.0 (2021-04-11) Changes to build automatically copy from assets/ to output directory assets/ PR #43 add target platform for manifests: chrome/firefox PR #43 improved build outputs PR #42 Other changes Updated dependencies PR #44","title":"Version 1.x (latest)"},{"location":"09-release-notes/#102-2021-04-11","text":"Changes to build Custom folders for scss bundles and always minify css PR #47 Default style bundle name without extension PR #48","title":"1.0.2 (2021-04-11)"},{"location":"09-release-notes/#100-2021-04-11","text":"Changes to build automatically copy from assets/ to output directory assets/ PR #43 add target platform for manifests: chrome/firefox PR #43 improved build outputs PR #42 Other changes Updated dependencies PR #44","title":"1.0.0 (2021-04-11)"},{"location":"10-showcase/","text":"List of extensions and add-ons built with Extension CLI Alphabetical list Name Maker Badge Doucheblock for Twitter Mobile First Download All Images Mobile First Shortcuts for Chrome Mobile First Sitemap Generator nkrusch Open Source Projects on Github See Dependency Graph Add your own project! Edit this file on Github to add your project, then submit a PR.","title":"Showcase"},{"location":"10-showcase/#alphabetical-list","text":"Name Maker Badge Doucheblock for Twitter Mobile First Download All Images Mobile First Shortcuts for Chrome Mobile First Sitemap Generator nkrusch","title":"Alphabetical list"},{"location":"10-showcase/#open-source-projects-on-github","text":"See Dependency Graph","title":"Open Source Projects on Github"},{"location":"10-showcase/#add-your-own-project","text":"Edit this file on Github to add your project, then submit a PR.","title":"Add your own project!"},{"location":"12-helpful/","text":"Helpful References Collection of generally helpful links for extension development. Chrome Extension Development Resources Extension Development Intro Guide Extension manifest reference: version 2 - version 3 Chrome APIs Internationalization Supporting multiple languages Language locales list Extension Publishing Guides Chrome Webstore Image Guide Publishing for Chrome Chrome Web Store API Edge Publishing for Edge Opera Publishing for Opera addons Firefox Publishing for Firefox","title":"Helpful References"},{"location":"12-helpful/#helpful-references","text":"Collection of generally helpful links for extension development.","title":"Helpful References"},{"location":"12-helpful/#chrome-extension-development-resources","text":"Extension Development Intro Guide Extension manifest reference: version 2 - version 3 Chrome APIs Internationalization Supporting multiple languages Language locales list","title":"Chrome Extension Development Resources"},{"location":"12-helpful/#extension-publishing-guides","text":"Chrome Webstore Image Guide Publishing for Chrome Chrome Web Store API Edge Publishing for Edge Opera Publishing for Opera addons Firefox Publishing for Firefox","title":"Extension Publishing Guides"},{"location":"13-cli-development/","text":"Extension CLI Development This CLI is built with numerous tools listed below and written in Javascript. The source code is available on Github . Releases are published on NPM . Tech Stack Extension CLI is built with all of the following: Node.js Gulp Chalk Commander Babel Chai Mocha ESLint jsdom JSDoc prompts Sinon Sinon-chrome NYC Webpack CLI Spinner yargs This user guide is built with MkDocs and MkDocs material theme . CI builds by Travis CI and documentation served by Github Pages. Project Organization Path Description \u2514 .github Github config files and markdown \u2514 cli all available commands are defined here \u2514 config Resources and config files used by the commands in cli \u2514 guide User guide \u2514 test CLI unit tests \u2514 /* Application root; various project config files To setup a local dev environment and develop the CLI application, see Environment Setup \u2192","title":"Overview"},{"location":"13-cli-development/#extension-cli-development","text":"This CLI is built with numerous tools listed below and written in Javascript. The source code is available on Github . Releases are published on NPM .","title":"Extension CLI Development"},{"location":"13-cli-development/#tech-stack","text":"Extension CLI is built with all of the following: Node.js Gulp Chalk Commander Babel Chai Mocha ESLint jsdom JSDoc prompts Sinon Sinon-chrome NYC Webpack CLI Spinner yargs This user guide is built with MkDocs and MkDocs material theme . CI builds by Travis CI and documentation served by Github Pages.","title":"Tech Stack"},{"location":"13-cli-development/#project-organization","text":"Path Description \u2514 .github Github config files and markdown \u2514 cli all available commands are defined here \u2514 config Resources and config files used by the commands in cli \u2514 guide User guide \u2514 test CLI unit tests \u2514 /* Application root; various project config files To setup a local dev environment and develop the CLI application, see Environment Setup \u2192","title":"Project Organization"},{"location":"13-dev-env/","text":"Environment Setup To build extension CLI locally you will need Node.js and any web IDE of your choice. The general development setting requires two projects open at the same time: the CLI source code, which you are developing a driver project that is used to execute the CLI commands The following instructions explain how to set up such environment. Instructions 1. Setup the CLI Fork the extension-CLI repo Clone the forked repo and then open it in your favorite web IDE Run the following command in terminal 1 npm install 2. Setup driver project Next you will need a project to drive the CLI to be able to execute its commands. You can use any existing extension project that is using extension-cli. If you do not have an existing project, create a new project. In the directory where you want to create the driver project run: 1 npx extension-cli then follow the on-screen instructions. Once you have the project ready, open it in a web IDE. At this point you should have two IDE windows open. 3. Link driver and CLI In CLI project terminal run this command (use sudo npm link if necessary): 1 npm link In the driver project terminal run this command: 1 npm link extension-cli In the CLI project open config/build.json and change value of projectRootDir to an absolute path of the driver project. 1 2 3 \"projectRootDir\" : \"../../../\" , // before \"projectRootDir\" : \"/path/to/my/driver/project\" , // after This last step is required because by default the CLI assumes it is in node_modules relative to the target project. This is not necessarily the case when using a locally linked package. Your dev environment should now be ready to use. Commit Changes Once done, commit your changes and open a PR. Note that if you changed projectRootDir you should exclude that change or undo it before committing. Clean up Finally you should unlink CLI and driver project to remove all local links. In the driver project terminal run: 1 npm unlink --no-save extension-cli to unlink project from the local CLI version. Note that this may remove extension-cli from the project completely, and you may need to run install extension-cli to add back the version from NPM registry. This is relevant only if you used an existing project as a driver. In CLI project terminal run: 1 npm r extension-cli -g to remove the CLI symlink.","title":"Environment Setup"},{"location":"13-dev-env/#environment-setup","text":"To build extension CLI locally you will need Node.js and any web IDE of your choice. The general development setting requires two projects open at the same time: the CLI source code, which you are developing a driver project that is used to execute the CLI commands The following instructions explain how to set up such environment.","title":"Environment Setup"},{"location":"13-dev-env/#instructions","text":"","title":"Instructions"},{"location":"13-dev-env/#1-setup-the-cli","text":"Fork the extension-CLI repo Clone the forked repo and then open it in your favorite web IDE Run the following command in terminal 1 npm install","title":"1. Setup the CLI"},{"location":"13-dev-env/#2-setup-driver-project","text":"Next you will need a project to drive the CLI to be able to execute its commands. You can use any existing extension project that is using extension-cli. If you do not have an existing project, create a new project. In the directory where you want to create the driver project run: 1 npx extension-cli then follow the on-screen instructions. Once you have the project ready, open it in a web IDE. At this point you should have two IDE windows open.","title":"2. Setup driver project"},{"location":"13-dev-env/#3-link-driver-and-cli","text":"In CLI project terminal run this command (use sudo npm link if necessary): 1 npm link In the driver project terminal run this command: 1 npm link extension-cli In the CLI project open config/build.json and change value of projectRootDir to an absolute path of the driver project. 1 2 3 \"projectRootDir\" : \"../../../\" , // before \"projectRootDir\" : \"/path/to/my/driver/project\" , // after This last step is required because by default the CLI assumes it is in node_modules relative to the target project. This is not necessarily the case when using a locally linked package. Your dev environment should now be ready to use.","title":"3. Link driver and CLI"},{"location":"13-dev-env/#commit-changes","text":"Once done, commit your changes and open a PR. Note that if you changed projectRootDir you should exclude that change or undo it before committing.","title":"Commit Changes"},{"location":"13-dev-env/#clean-up","text":"Finally you should unlink CLI and driver project to remove all local links. In the driver project terminal run: 1 npm unlink --no-save extension-cli to unlink project from the local CLI version. Note that this may remove extension-cli from the project completely, and you may need to run install extension-cli to add back the version from NPM registry. This is relevant only if you used an existing project as a driver. In CLI project terminal run: 1 npm r extension-cli -g to remove the CLI symlink.","title":"Clean up"},{"location":"14-user-guide/","text":"Editing User Guide If you are interested in editing the content (and not layout) of this user guide, simply edit the markdown directly in any markdown editor or on Github. There is a pen icon linking to the markdown source on each page of these docs, which takes you directly to the source document. Developing User Guide When you want to edit the layout, organization and/or theme of these docs, you will need to run these project docs locally. This user guide is built with Python. You will need Python 3.x before proceeding. If you are not a maintainer, fork the repo Clone the forked repo and launch your favorite markdown editor and terminal. Setup Python development env as follows: 1 2 3 4 5 6 7 8 9 10 11 12 # 1. create virtual env for packages python3 - m venv env # 2. activate virtual env source env / bin / activate # macOS/Linux env \\ Scripts \\ activate . bat # Windows # 3. install requirements: pip install - r requirements . txt # 4. run the docs: mkdocs serve Relevant files: all written documents are under guide directory mkdocs.yml at project root is a configuration file for Mkdocs guide/assets includes static assets for these docs After editing the docs, commit your changes and open a PR as necessary. Travis CI is used to compile and publish the docs automatically after merged to master branch.","title":"Editing User Guide"},{"location":"14-user-guide/#editing-user-guide","text":"If you are interested in editing the content (and not layout) of this user guide, simply edit the markdown directly in any markdown editor or on Github. There is a pen icon linking to the markdown source on each page of these docs, which takes you directly to the source document.","title":"Editing User Guide"},{"location":"14-user-guide/#developing-user-guide","text":"When you want to edit the layout, organization and/or theme of these docs, you will need to run these project docs locally. This user guide is built with Python. You will need Python 3.x before proceeding. If you are not a maintainer, fork the repo Clone the forked repo and launch your favorite markdown editor and terminal. Setup Python development env as follows: 1 2 3 4 5 6 7 8 9 10 11 12 # 1. create virtual env for packages python3 - m venv env # 2. activate virtual env source env / bin / activate # macOS/Linux env \\ Scripts \\ activate . bat # Windows # 3. install requirements: pip install - r requirements . txt # 4. run the docs: mkdocs serve Relevant files: all written documents are under guide directory mkdocs.yml at project root is a configuration file for Mkdocs guide/assets includes static assets for these docs After editing the docs, commit your changes and open a PR as necessary. Travis CI is used to compile and publish the docs automatically after merged to master branch.","title":"Developing User Guide"},{"location":"15-tutorials/","text":"Learn how to build browser extensions with Extension CLI Comical Twitter CSS only \u2022 beginner-friendly Build an extension that modifies CSS of specific domain. In this tutorial I will show how to build an extension that renders twitter.com web app using Comic Sans font. You can apply this same technique to modify CSS of any domain. Start Tutorial \u2192","title":"How to Build Extensions"},{"location":"15-tutorials/#comical-twitter","text":"CSS only \u2022 beginner-friendly Build an extension that modifies CSS of specific domain. In this tutorial I will show how to build an extension that renders twitter.com web app using Comic Sans font. You can apply this same technique to modify CSS of any domain. Start Tutorial \u2192","title":"Comical Twitter"}]}